// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/quintans/go-clean-ddd/internal/infra/gateway/postgres/ent/outbox"
)

// Outbox is the model entity for the Outbox schema.
type Outbox struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload []byte `json:"payload,omitempty"`
	// Consumed holds the value of the "consumed" field.
	Consumed bool `json:"consumed,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Outbox) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case outbox.FieldPayload:
			values[i] = new([]byte)
		case outbox.FieldConsumed:
			values[i] = new(sql.NullBool)
		case outbox.FieldID:
			values[i] = new(sql.NullInt64)
		case outbox.FieldKind:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Outbox", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Outbox fields.
func (o *Outbox) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case outbox.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int64(value.Int64)
		case outbox.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				o.Kind = value.String
			}
		case outbox.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil {
				o.Payload = *value
			}
		case outbox.FieldConsumed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field consumed", values[i])
			} else if value.Valid {
				o.Consumed = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Outbox.
// Note that you need to call Outbox.Unwrap() before calling this method if this Outbox
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Outbox) Update() *OutboxUpdateOne {
	return (&OutboxClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Outbox entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Outbox) Unwrap() *Outbox {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Outbox is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Outbox) String() string {
	var builder strings.Builder
	builder.WriteString("Outbox(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("kind=")
	builder.WriteString(o.Kind)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", o.Payload))
	builder.WriteString(", ")
	builder.WriteString("consumed=")
	builder.WriteString(fmt.Sprintf("%v", o.Consumed))
	builder.WriteByte(')')
	return builder.String()
}

// Outboxes is a parsable slice of Outbox.
type Outboxes []*Outbox

func (o Outboxes) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
